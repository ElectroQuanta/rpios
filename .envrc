VENV=bare-venv

# Function to test if the provided toolchain works
test_toolchain() {
    cc_gcc="$1"
    echo "Testing: $cc_gcc"
    if ! "$cc_gcc" --version >/dev/null 2>&1; then
        echo "Error: Cross-compile GCC command failed."
        return 1
    fi
    return 0
}

print_env(){
    echo "======== Environment"
    echo "TOOLCHAIN: $CROSS_COMPILE"
    echo "ARCH: $ARCH"
    echo "PLATFORM: $PLATFORM"
    echo "DEMO: $DEMO"
}

venv_create(){
	if [ ! -d "$VENV" ]; then
		echo "Creating virtual environment"
		python -m venv "$VENV"
		pip install --upgrade pip
	fi

}

venv_activate(){
    echo "Activating Python virtual environment"
    source "${VENV}/bin/activate"
}

venv_install_requirements(){
    echo "Installing python requirements"
    pip install -r requirements.txt 
}

# Set default toolchain path and prefix
setup_cc_toolchain(){
    TOOLCHAIN_PATH=$(realpath "/home/zmp/OneDrive_UM/Documents/Univ/MI_Electro/Tese/Bao/Toolchains/arm/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-elf")
    TOOLCHAIN_PREFIX=aarch64-none-elf-
    CROSS_COMPILE="$TOOLCHAIN_PREFIX"
    cross_compile_gcc="${CROSS_COMPILE}gcc"

    # Run the command and capture its exit status
    if ! test_toolchain "$cross_compile_gcc"; then
	echo "Setting fallback toolchain..."
	CROSS_COMPILE="$TOOLCHAIN_PATH/bin/$TOOLCHAIN_PREFIX"
	cross_compile_gcc="${CROSS_COMPILE}gcc"
    fi

    # Test the fallback toolchain
    if ! test_toolchain "$cross_compile_gcc"; then
	echo "Error: No working cross-compile toolchain found. Exiting..."
	exit 1
    fi
}


############################ MAIN ############################

# setup_cc_toolchain
# venv_create
# venv_activate
# venv_install_requirements
# 
# # Export environment variables
# export CROSS_COMPILE
# export ARCH=aarch64
# export PLATFORM=rpi4
# #export DEMO=linux+freertos
# export DEMO=px4
# 
# print_env
